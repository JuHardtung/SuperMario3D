#version 400 core

in vec2 pass_textureCoordinates;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;

in vec3 fragPos;
in vec3 tangentLightPos[4];
in vec3 tangentViewPos;
in vec3 tangentFragPos;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

//TEST
const float heightScale = 0.2f;
float currentTexCoords = 0.0;


vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
	//number of depth Layers
	const float minLayers = 8;
	const float maxLayers = 32;
	float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));
	 
	//calculate the size of each layer
	float layerDepth = 1.0 / numLayers;
	
	//depth of current layer
	float currentLayerDepth = 0.0;
	
	// the amount to shift the texture coordinates per layer (from vector P)
	vec2 p = viewDir.xy * heightScale;
	vec2 deltaTexCoords = p / numLayers;
	
	//get initial values
	vec2 currentTexCoords = texCoords;
	float currentDepthMapValue = texture(depthMap, currentTexCoords).r;
	
	while(currentLayerDepth < currentDepthMapValue)
	{
		//shift texture coordinates along direction of P
		currentTexCoords -= deltaTexCoords;
		
		//get depthMap value at current texture coordinates
		currentDepthMapValue = texture(depthMap, currentTexCoords).r;
		
		//get depth of next layer
		currentLayerDepth += layerDepth;
	}
	
	//get texture coordinates before collision (reverse operations)
	vec2 prevTexCoords = currentTexCoords + deltaTexCoords;
	
	// get depth after and before collision for linear interpolation
	float afterDepth = currentDepthMapValue - currentLayerDepth;
	float beforeDepth = texture(depthMap, prevTexCoords).r - currentLayerDepth + layerDepth;
	
	// interpolation of texture coordinates
	float weight = afterDepth / (afterDepth - beforeDepth);
	vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);
	
	
	return finalTexCoords;
	
   /* float height =  texture(depthMap, pass_textureCoordinates).r;     
    vec2 p = viewDir.xy / viewDir.z * (height * heightScale);
     
     return texCoords - viewDir.xy * (height * heightScale);        */
}

void main(void){

	vec3 viewDir = normalize(tangentViewPos - tangentFragPos);
	vec2 texCoords = pass_textureCoordinates;
	
	texCoords = ParallaxMapping(texCoords, viewDir);
	
	if(texCoords.x > 1.0 || texCoords.y > 1.0 || texCoords.y < 0.0 || texCoords.y < 0.0)
	{
		discard;
	}
	
	
	vec4 normalMapValue = 2.0 * texture(normalMap, texCoords) -1.0;

	vec3 unitNormal = normalize(normalMapValue.rgb);
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	//loop for each lightSource
	for(int i=0;i<4;i++)
	{
		//TEST
		vec3 lightDir = normalize(tangentLightPos[i] - tangentFragPos);
		
		//ATTENUATION
		float distance 	= length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		
		//DIFFUSE
		vec3 unitLightVector = normalize(toLightVector[i]);	
		float nDotl = dot(unitNormal,unitLightVector);
		float brightness = max(nDotl,0.0);
		
		totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
		
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		
		//SPECULAR
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i]) / attFactor;
	}
	
	totalDiffuse = max(totalDiffuse, 0.2);
	
	vec4 textureColour = texture(modelTexture, texCoords);
	if(textureColour.a < 0.5)
	{
		discard;
	}

	out_Color =  vec4(totalDiffuse, 1.0) * textureColour + vec4(totalSpecular, 1.0);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
	
/*	float r = 0;
	float g = 0;
	float b = 0;
	float textureTest = texture(depthMap, pass_textureCoordinates).r;
	
	if (textureTest > 0.0 && textureTest < 0.6)
	{
	r = 1;
	g = 0;
	b = 0;
	} else if (textureTest > 0.6 && textureTest < 0.7)
	{
	r = 0;
	g = 1;
	b = 0;
	} else if (textureTest > 0.7 && textureTest < 0.9)
	{
	r = 0;
	g = 0;
	b = 1;
	}*/
	
}