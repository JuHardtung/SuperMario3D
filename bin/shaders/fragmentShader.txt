#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;
in vec4 shadowCoords;

out vec4 out_Colour;


uniform sampler2D textureSampler;
uniform sampler2D shadowMap;

uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;
uniform float mapSize;

const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);

void main(void) {

	vec3 unitLightVector = normalize(toLightVector);
	vec3 lightDirection = -unitLightVector;
		

	float bias = 0.001;
	//max(0.005 * (1.0 - dot(surfaceNormal, lightDirection)), 0.0005);  

	float texelSize = 1.0 / mapSize;
	float total = 0.0;
	
	for(int x=-pcfCount; x<=pcfCount; x++){
			for(int y=-pcfCount; y<=pcfCount; y++){
			float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x,y) * texelSize).r;
				if(shadowCoords.z - bias > objectNearestLight){
					total += 1.0;
		}
			}
	}

	total /= totalTexels;

	float objectNearestLight = texture(shadowMap, shadowCoords.xy).r;
	float lightFactor = 1.0 - (total * shadowCoords.w);


	vec3 unitNormal = normalize(surfaceNormal);
	
	vec3 totalSpecular = vec3(0.0);
	
	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1, 0.2);
	vec3 diffuse = brightness * lightColour;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	totalSpecular = dampedFactor * reflectivity * lightColour;
	
	vec4 textureColour = texture(textureSampler, pass_textureCoords);
	if(textureColour.a < 0.5){
		discard;
	}
	
	diffuse = max(diffuse * lightFactor, 0.2);
	
	out_Colour = vec4(diffuse, 1.0) * textureColour + vec4(totalSpecular,1.0);
	out_Colour = mix(vec4(skyColour,1.0), out_Colour, visibility);
}

